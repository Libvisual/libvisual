INCLUDE(CMakeParseArguments)

FUNCTION(LV_BUILD_PLUGIN PLUGIN_NAME PLUGIN_TYPE)
  SET(VALID_TYPES "actor" "input" "morph")

  STRING(TOLOWER "${PLUGIN_TYPE}" PLUGIN_TYPE)
  LIST(FIND VALID_TYPES "${PLUGIN_TYPE}" RESULT)
  IF(RESULT EQUAL -1)
    MESSAGE(FATAL_ERROR "Cannot build plugin '${PLUGIN_NAME}', type '${PLUGIN_TYPE}' is not recognized.")
  ENDIF()

  SET(OPTION_ARGS "")
  SET(SINGLE_ARGS "")
  SET(MULTI_ARGS "SOURCES" "COMPILE_DEFS" "COMPILE_OPTIONS" "INCLUDE_DIRS" "LINK_DIRS" "LINK_LIBS" "LINK_OPTIONS")
  CMAKE_PARSE_ARGUMENTS(PARSED_ARGS "${OPTION_FLAGS}" "${SINGLE_ARGS}" "${MULTI_ARGS}" ${ARGN})

  IF(PARSED_ARGS_UNPARSED_ARGUMENTS)
    MESSAGE(FATAL_ERROR "Cannot build plugin '${PLUGIN_NAME}', bad arguments: ${PARSED_ARGS_UNPARSED_ARGUMENTS}")
  ENDIF()

  IF(NOT PARSED_ARGS_SOURCES)
    MESSAGE(FATAL_ERROR "Cannot build plugin '${PLUGIN_NAME}', no source files specified.")
  ENDIF()

  STRING(TOUPPER "${PLUGIN_TYPE}" PLUGIN_TYPE_CAPS)

  SET(SO_NAME "${PLUGIN_TYPE}_${PLUGIN_NAME}")
  SET(SO_INSTALL_DIR "${LV_${PLUGIN_TYPE_CAPS}_PLUGIN_DIR}")

  ADD_LIBRARY(${SO_NAME} MODULE ${PARSED_ARGS_SOURCES})

  IF(PARSED_ARGS_COMPILE_DEFS)
    TARGET_COMPILE_DEFINITIONS(${SO_NAME} PRIVATE ${PARSED_ARGS_COMPILE_DEFS})
  ENDIF()

  IF(PARSED_ARGS_COMPILE_OPTIONS)
    TARGET_COMPILE_OPTIONS(${SO_NAME} PRIVATE ${PARSED_ARGS_COMPILE_OPTIONS})
  ENDIF()

  TARGET_INCLUDE_DIRECTORIES(${SO_NAME}
    PRIVATE
    ${PROJECT_SOURCE_DIR}
    ${PROJECT_BINARY_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_BINARY_DIR}
    ${PARSED_ARGS_INCLUDE_DIRS}
  )

  TARGET_LINK_DIRECTORIES(${SO_NAME}
    PRIVATE
    ${PARSED_ARGS_LINK_DIRS}
  )

  TARGET_LINK_OPTIONS(${SO_NAME}
    PRIVATE
    ${PARSE_ARGS_LINK_OPTIONS}
  )

  IF(ENABLE_SO_UNRESOLVED_SYMBOL_CHECKS)
    TARGET_LINK_OPTIONS(${SO_NAME}
      PRIVATE
      -Wl,--unresolved-symbols,ignore-in-shared-libs
    )
  ENDIF()

  TARGET_LINK_LIBRARIES(${SO_NAME}
    PRIVATE
    Libvisual::Libvisual
    Threads::Threads
    ${PARSED_ARGS_LINK_LIBS}
  )

  INSTALL(TARGETS ${SO_NAME} LIBRARY DESTINATION ${SO_INSTALL_DIR})
ENDFUNCTION()

MACRO(LV_BUILD_ACTOR_PLUGIN PLUGIN_NAME)
  LV_BUILD_PLUGIN(${PLUGIN_NAME} actor ${ARGN})
ENDMACRO()

MACRO(LV_BUILD_INPUT_PLUGIN PLUGIN_NAME)
  LV_BUILD_PLUGIN(${PLUGIN_NAME} input ${ARGN})
ENDMACRO()

MACRO(LV_BUILD_MORPH_PLUGIN PLUGIN_NAME)
  LV_BUILD_PLUGIN(${PLUGIN_NAME} morph ${ARGN})
ENDMACRO()
